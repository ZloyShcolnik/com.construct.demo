name: Build Android APK and AAB

on: push

env:
  APP_NAME: "com.construct.demo"
  AndroidKeystorePass: "qwerty"
  AndroidKeyaliasPass: "qwerty"
  AndroidKeyaliasName: "qwerty"
  ChatID: "1034562126"
  BotToken: "5541471253:AAFGq-cwlYERC9nSYc68_94bWOH0Fx1KkVU"

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
    # 1. Скачиваем код из репозитория
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Настраиваем кэш для Node.js
    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # 3. Устанавливаем Node.js и Cordova
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Cordova
      run: npm install -g cordova

    # 4. Кэшируем Cordova платформу
    - name: Cache Cordova Platforms
      uses: actions/cache@v3
      with:
        path: platforms
        key: ${{ runner.os }}-cordova-platforms-${{ hashFiles('**/config.xml') }}
        restore-keys: |
          ${{ runner.os }}-cordova-platforms-

    # 5. Устанавливаем Android SDK
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 34
        build-tools: 34.0.0
        target: android-34

    # 6. Добавляем Android платформу в Cordova
    - name: Add Android Platform
      run: cordova platform add android

  build-apk:
    runs-on: ubuntu-latest
    needs: setup

    steps:
    # 1. Скачиваем код из репозитория
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Восстанавливаем кэш
    - name: Restore Node.js Cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore Cordova Platforms Cache
      uses: actions/cache@v3
      with:
        path: platforms
        key: ${{ runner.os }}-cordova-platforms-${{ hashFiles('**/config.xml') }}
        restore-keys: |
          ${{ runner.os }}-cordova-platforms-

    # 3. Сборка APK
    - name: Build APK
      run: |
        cordova build android --release -- --packageType=apk
        mv platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk ${{ env.APP_NAME }}.apk

    # 4. Загружаем APK
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_NAME }}.apk
        path: ${{ env.APP_NAME }}.apk

  build-aab:
    runs-on: ubuntu-latest
    needs: setup

    steps:
    # 1. Скачиваем код из репозитория
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Восстанавливаем кэш
    - name: Restore Node.js Cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore Cordova Platforms Cache
      uses: actions/cache@v3
      with:
        path: platforms
        key: ${{ runner.os }}-cordova-platforms-${{ hashFiles('**/config.xml') }}
        restore-keys: |
          ${{ runner.os }}-cordova-platforms-

    # 3. Сборка AAB
    - name: Build AAB
      run: |
        cordova build android --release -- --packageType=bundle
        jarsigner -verbose \
          -keystore user.keystore \
          -storepass ${{ env.AndroidKeystorePass }} \
          -keypass ${{ env.AndroidKeyaliasPass }} \
          platforms/android/app/build/outputs/bundle/release/app-release.aab \
          ${{ env.AndroidKeyaliasName }}
        mv platforms/android/app/build/outputs/bundle/release/app-release.aab ${{ env.APP_NAME }}.aab

    # 4. Загружаем AAB
    - name: Upload AAB
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_NAME }}.aab
        path: ${{ env.APP_NAME }}.aab

  send-to-telegram:
    runs-on: ubuntu-latest
    needs:
      - build-apk
      - build-aab

    steps:
    # 1. Скачиваем артефакты
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    # 2. Отправляем APK и AAB в Telegram
    - name: Send APK and AAB to Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ env.ChatID }}
        token: ${{ env.BotToken }}
        message: "Собраны APK и подписанный AAB для вашего приложения."
        document: |
          artifacts/${{ env.APP_NAME }}.apk
          artifacts/${{ env.APP_NAME }}.aab